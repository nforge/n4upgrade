

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Iterator;
import java.util.Set;

import org.eclipse.jgit.api.Git;
import org.eclipse.jgit.api.errors.CanceledException;
import org.eclipse.jgit.api.errors.DetachedHeadException;
import org.eclipse.jgit.api.errors.GitAPIException;
import org.eclipse.jgit.api.errors.InvalidConfigurationException;
import org.eclipse.jgit.api.errors.InvalidRemoteException;
import org.eclipse.jgit.api.errors.NoHeadException;
import org.eclipse.jgit.api.errors.RefNotFoundException;
import org.eclipse.jgit.api.errors.TransportException;
import org.eclipse.jgit.api.errors.WrongRepositoryStateException;
import org.eclipse.jgit.lib.Repository;
import org.eclipse.jgit.lib.RepositoryBuilder;

public class UpgradeCheck {

	Repository local; 
	Repository master;
	private String remoteURI = "git://github.com/youngje/nforge4.git";
	
	public void setRepositories() throws IOException, InvalidRemoteException, TransportException, GitAPIException{

		
		this.local = new RepositoryBuilder().findGitDir().build();
		
		
		this.master = new RepositoryBuilder().setGitDir(new File(remoteURI)).readEnvironment().findGitDir().build();
		
		
		Git masterGit = new Git(master);
		masterGit.cloneRepository().setBare(false).setCloneAllBranches(true).setURI(remoteURI).call();
//		System.out.println(local.getDirectory());
//		String dir = local.getDirectory().toString();
//		dir = dir.replace("\\.git", "update");
//		System.out.println(dir);
//		//Git masterGit = Git.cloneRepository().setURI(remoteURIString).setDirectory(new File(dir)).call();
//		Git masterGit = Git.cloneRepository().setURI(remoteURIString).setRemote	("master").call();
//		//this.master = new RepositoryBuilder().findGitDir(new File("git://github.com/youngje/nforge4.git")).readEnvironment().findGitDir().build();
	}
	
	public void getRemote(Repository repo){
		
		Set<String> remotes = repo.getConfig().getSubsections("remote");
		for(String remoteName : remotes){
			System.out.println(remoteName);
			
		}
		
	}
	
	public ArrayList<String> getTags(Repository repository){
		Iterator<String> tagKeys = repository.getTags().keySet().iterator();
		ArrayList<String> tags = new ArrayList<String>();
		
		while(tagKeys.hasNext()){
			tags.add(tagKeys.next());
		}

		for(String tag : tags){
			System.out.println(tag);
		}
		return tags;
	}

	public String findLastTag(ArrayList<String> tags){
		Collections.sort(tags);
		return tags.get(0);
	}
	
	public void isNew() throws WrongRepositoryStateException, InvalidConfigurationException, DetachedHeadException, InvalidRemoteException, CanceledException, RefNotFoundException, NoHeadException, TransportException, GitAPIException{
		String localTag = findLastTag(getTags(local));
		String masterTag = findLastTag(getTags(master));
		
		System.out.println();
		
		if(localTag.equals(masterTag)){
			System.out.println("최신 버전입니다");
		}
		else{
			System.out.println("최신 버전이 존재합니다.");
			Git git = new Git(local);
			if(git.pull().setTimeout(500).call().isSuccessful()){
				System.out.println("upgrade가 성공하였습니다");
			}
			else{
				System.out.println("upgrade를 실패하였습니다");
			}
		}
	}
	
}
